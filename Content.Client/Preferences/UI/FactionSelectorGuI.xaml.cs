using System.Linq;
using System.Numerics;
using Content.Client.Guidebook;
using Content.Client.Humanoid;
using Content.Client.Lobby;
using Content.Client.Message;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.CCVar;
using Content.Shared.Clothing;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Preferences.Loadouts.Effects;
using Content.Shared.Roles;
using Content.Shared.Traits;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Direction = Robust.Shared.Maths.Direction;

namespace Content.Client.Preferences.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class FactionSelectorGui : BoxContainer
    {
        private readonly IClientPreferencesManager _preferencesManager;
        private readonly IPrototypeManager _prototypeManager;
        public HumanoidCharacterProfile? Profile;
        public event Action<HumanoidCharacterProfile, int>? OnProfileChanged;

        private BoxContainer _factionList => CFactionList;

        private Dictionary<Button, string> internalDirectory;

        private bool _isDirty;
        public int CharacterSlot;


        public FactionSelectorGui(IClientPreferencesManager preferencesManager, IPrototypeManager prototypeManager)
        {
            RobustXamlLoader.Load(this);
            _preferencesManager = preferencesManager;
            _prototypeManager = prototypeManager;
            internalDirectory = new Dictionary<Button, string>();
        }

        private void SetDirty()
        {
            var controller = UserInterfaceManager.GetUIController<LobbyUIController>();
            controller.UpdateProfile(Profile);
            controller.ReloadCharacterUI();
            IsDirty = true;
        }

        private void setFaction(FactionPrototype faction)
        {
            if (Profile is null)
                return;
            if (Profile.Faction is not null)
                return;

            Profile = Profile.WithFaction(faction.ID);
            SetDirty();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            if (!disposing)
                return;

            _preferencesManager.OnServerDataLoaded -= LoadServerData;
        }

        public void LoadServerData()
        {
            Profile = (HumanoidCharacterProfile) _preferencesManager.Preferences!.SelectedCharacter;
            CharacterSlot = _preferencesManager.Preferences.SelectedCharacterIndex;

        }

        public void UpdateUI()
        {
            var factions = _prototypeManager.EnumeratePrototypes<FactionPrototype>().ToArray();
            Array.Sort(factions, FactionUIComparer.Instance);
            foreach (var faction in factions)
            {
                if (!faction.Enabled)
                    continue;

                var factionName = Loc.GetString($"faction-{faction.ID}");
            }
        }

        public void Save()
        {
            IsDirty = false;

            if (Profile == null)
                return;

            _preferencesManager.UpdateCharacter(Profile, CharacterSlot);
            OnProfileChanged?.Invoke(Profile, CharacterSlot);
            // Reset profile to default.
            UserInterfaceManager.GetUIController<LobbyUIController>().UpdateProfile();
        }

        private bool IsDirty
        {
            get => _isDirty;
            set
            {
                _isDirty = value;
            }
        }
    }
}
